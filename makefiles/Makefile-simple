#-------------------------------------------------------------------------------
#
#  @author	Alexander Zoellner
#  @date	2019/07/21
#  @mail	zoellner.contact<at>gmail.com
#  @file	Makefile-simple
#
#  @brief	Makefile template for building Linux user space software.
#
#			Uses out of source compilation, i.e. files are built in a
#			different directory then the source files.
#			Call with 'make DEBUG=1' for debug flags and code coverage
#			information.
#			The output of the code coverage, 'index.html' in the build
#			directory 'BUILD_DIR/html' can be viewed in a webbrower.
#
#-------------------------------------------------------------------------------

# Name of the executable (change as required)
TARGET		:= <my_appl>

# gcov, lcov and genhtml write their output to this file instead of stdout
LOGFILE		:= coverage.log

# Compiler to use (change as required, e.g. g++)
CC			:= gcc
# Add general linker flags
LDFLAGS		+=
# Set libraries for the linker with -l (e.g. pthread with '-lpthread')
LDLIBS		+=
# Code analysis compiler flags
A_CFLAGS	:= -fprofile-arcs -ftest-coverage
# Code analysis linker flags
A_LDFLAGS	:= -fprofile-arcs

ifeq ($(DEBUG), 1)
	LDLIBS += $(A_LDFLAGS)
	# Add compiler flags and keep the ones already set (mostly for warning flags
	CFLAGS += -Wall -Wpedantic -g3 -O0 $(A_CFLAGS)
else
	CFLAGS += -O2
endif

# Directories containing source files (*.c, *.cpp, etc.)
SRC_DIR		:= .
# Add source directories to search path
VPATH		:= $(foreach DIR,$(SRC_DIR),$(DIR):)
# Directories for header files (*.h, *.hpp, etc.)
HEADER_DIR	:= .
# Set general compiler flags (add include directories with '-I<path>')
CFLAGS		+= -I. $(foreach DIR,$(HEADER_DIR),-I$(DIR))
# Directory to place the object files in
BUILD_DIR	:= build

# Add all source files found in the source directories (change file ending as
# required). You may also list them explicitly if you want to.
SRCS		:= $(wildcard $(foreach DIR, $(SRC_DIR), $(DIR)/*.c))
# Add object file for each source file
OBJS		= $(addprefix $(BUILD_DIR)/,$(notdir $(SRCS:%.c=%.o)))

# Makefile targets
.PHONY: appl coverage clean
# Default target
.DEFAULT_GOAL := appl

appl: $(BUILD_DIR) $(TARGET)

# Link object files to executable
$(TARGET): $(OBJS)
	@echo '    ' LD '    ' $@
	@$(CC) $(LDFLAGS) -o $(BUILD_DIR)/$@ $^ $(LDLIBS)

# Compile source files to object files
$(BUILD_DIR)/%.o: %.c
	@echo '    ' CC '    ' $@
	@$(CC) $(CFLAGS) -c -o $@ $<

# Create build directory if it does not exist
$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

# Analyze code coverage (has to be compiled with 'DEBUG=1' first and target
# executed once)
coverage:
	@echo '    ' ANALYZE $(TARGET)
ifeq (,$(wildcard $(BUILD_DIR)/*.gcda))
	@echo '    ' OUTPUT NOT FOUND
	@echo '    ' Build with DEBUG=1 and execute \"$(TARGET)\"
else
	@gcov -b -u -f -o $(BUILD_DIR) $(SRCS) > $(BUILD_DIR)/$(LOGFILE)
	@lcov -c -d $(BUILD_DIR) -o $(BUILD_DIR)/$(TARGET).info >> $(BUILD_DIR)/$(LOGFILE)
	@genhtml -o $(BUILD_DIR)/html $(BUILD_DIR)/$(TARGET).info >> $(BUILD_DIR)/$(LOGFILE)
	@echo '    ' OUTPUT written to $(BUILD_DIR)/html/index.html
endif

# Remove all generated files (build directory might be same as source file one)
clean:
	@echo '    ' CLEAN $(BUILD_DIR)
	@rm -rf $(BUILD_DIR)/$(TARGET)
	@rm -rf $(BUILD_DIR)/$(LOGFILE)
	@rm -rf $(TARGET)/html
	@rm -rf $(BUILD_DIR)/*.gcda
	@rm -rf $(BUILD_DIR)/*.gcno
	@rm -rf $(BUILD_DIR)/*.info
	@rm -rf $(BUILD_DIR)/*.o
	@rm -rf $(BUILD_DIR)/*.a
	@rm -rf $(BUILD_DIR)/*.so
	@rm -rf $(BUILD_DIR)
